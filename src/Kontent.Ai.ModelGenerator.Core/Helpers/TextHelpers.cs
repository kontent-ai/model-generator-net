using System;
using System.Collections;
using System.Linq;
using System.Text.RegularExpressions;
using Kontent.Ai.ModelGenerator.Core.Common;

namespace Kontent.Ai.ModelGenerator.Core.Helpers;

public static class TextHelpers
{
    private static readonly Regex LineEndings = new(@"\r\n|\n\r|\n|\r");
    private const string WordSeparator = " ";

    /// <summary>
    /// Returns a valid CSharp Identifier in a Pascal Case format for given string.
    /// </summary>
    /// <param name="name">name to be transformed</param>
    /// <returns></returns>
    public static string GetValidPascalCaseIdentifierName(string name) => SplitName(name)
        .Select(word => char.ToUpper(word[0]) + word.Substring(1))
        .Aggregate((previous, current) => previous + current);

    /// <summary>
    /// Returns a Snake Case format for given string.
    /// </summary>
    /// <param name="name">name to be transformed</param>
    /// <returns></returns>
    public static string GetUpperSnakeCasedIdentifierName(string name) => new(
        SplitName(name)
            .Select(word => char.ToUpper(word[0]) + word.Substring(1) + "_")
            .Aggregate((previous, current) => previous + current)
            .SkipLast(1)
            .ToArray()
        );

    public static string NormalizeLineEndings(this string text) =>
        LineEndings.Replace(text, Environment.NewLine);

    public static string GenerateCommentString(string customComment)
    {
        if (string.IsNullOrWhiteSpace(customComment))
        {
            throw new ArgumentNullException(nameof(customComment));
        }

        return
            @$"// <auto-generated>
// This code was generated by a kontent-generators-net tool
// (see https://github.com/kontent-ai/model-generator-net).
//
{customComment}
// </auto-generated>{Environment.NewLine}{Environment.NewLine}";
    }

    public static string GetEnumerableType(string typeName) => string.IsNullOrWhiteSpace(typeName)
        ? throw new ArgumentException("", nameof(typeName))
        : $"{nameof(IEnumerable)}<{typeName}>";

    private static string[] SplitName(string name)
    {
        var sanitizedName = Regex.Replace(name, "[^a-zA-Z0-9]", WordSeparator, RegexOptions.IgnoreCase | RegexOptions.Multiline);

        // Remove leading numbers and leading whitespace (e.g.: '  123Name123' -> 'Name123'
        sanitizedName = Regex.Replace(sanitizedName, "^(\\s|[0-9])+", "");

        if (sanitizedName == string.Empty)
        {
            throw new InvalidIdentifierException($"Unable to create a valid Identifier from '{name}'");
        }

        return sanitizedName
            .ToLower()
            .Split([WordSeparator], StringSplitOptions.RemoveEmptyEntries);
    }
}
